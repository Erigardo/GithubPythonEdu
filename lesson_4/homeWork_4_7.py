# 7. Реализовать генератор с помощью функции с ключевым словом yield,
# создающим очередное значение.
# При вызове функции должен создаваться объект-генератор.
# Функция вызывается следующим образом: for el in fact(n).
# Она отвечает за получение факториала числа.
# В цикле нужно выводить только первые n чисел, начиная с 1! и до n!.
#
# Подсказка: факториал числа n — произведение чисел от 1 до n.
# Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

# Мои заметки:
# Формула нахождения факториала:
# n! = 1 * 2 * … * n,
# где n – это число, а n! – факториал этого числа.
# Формулу можно представить в таком виде:
# n! = 1 * … * (n-2) * (n-1) * n,
# т. е. каждый предыдущий множитель меньше на единицу,
# чем последующий.


def fac(x):
    if x == 0:
        return 1
    return fac(x - 1) * x


print(fac(5))

print("-" * 100)


def fact(a):
    # добавляем счетчик counter
    counter = 1
    # добавляем цикл в диапазоне от 1 до параметра(a) + 1
    for i in range(1, a + 1):
        # счетчик counter умножается при каждой итерации на следующее число
        counter *= i
        # возвращаем counter из функции "yield",
        # которая при каждом запросе будет
        # возвращать значение после итерации
        yield counter


for el in fact(6):
    print(el)
