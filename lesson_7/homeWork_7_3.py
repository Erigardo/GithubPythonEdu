# –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É —Ä–∞–±–æ—Ç—ã —Å –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–º–∏ –∫–ª–µ—Ç–∫–∞–º–∏,
# —Å–æ—Å—Ç–æ—è—â–∏–º–∏ –∏–∑ —è—á–µ–µ–∫. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å –ö–ª–µ—Ç–∫–∞.
class Cell:

    # –í –µ–≥–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π
    # –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —è—á–µ–µ–∫ –∫–ª–µ—Ç–∫–∏ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).
    def __init__(self, fragments):
        self.fragments = fragments

    def table_cells(self, rows):  # ord(U+1F648)
        return '\n'.join(['ü¶†' * rows for _ in range(self.fragments // rows)]) + '\n' + 'üòé' * (self.fragments % rows)

    def __str__(self):
        return f'{self.fragments}'

    def __add__(self, other):
        print('–°—É–º–º–∞ –∫–ª–µ—Ç–æ–∫ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: ')
        return self.fragments + other.fragments

    def __sub__(self, other):
        print(f"–í—ã—á–∏—Ç–∞–Ω–∏–µ –∫–ª–µ—Ç–æ–∫ ({self.fragments}) –∏ ({other})")
        return (self.fragments - other.fragments) \
            if self.fragments - other.fragments > 0 \
            else "–ü–µ—Ä–≤–∞—è –∫–ª–µ—Ç–∫–∞ –º–µ–Ω—å—à–µ –≤—Ç–æ—Ä–æ–π!"

    def __mul__(self, other):
        print('–£–º–Ω–æ–∂–µ–Ω–∏–µ –∫–ª–µ—Ç–æ–∫: ')
        return self.fragments * other.fragments

    def __floordiv__(self, other):
        print("–î–µ–ª–µ–Ω–∏–µ –∫–ª–µ—Ç–æ–∫: ")
        return self.fragments // other.fragments


first_cell = Cell(15)
second_cell = Cell(5)
print(second_cell.__add__(first_cell))
print(first_cell.__sub__(second_cell))
print(first_cell * second_cell)
print(first_cell // second_cell)
print(first_cell.table_cells(6))
print(second_cell.table_cells(5))

# print(first_cell//)

#     def __init__(self, parts_of_cell=5, cells=1):
#         self.cell = [["*"] * parts_of_cell]
#         print(f"–§—Ä–∞–≥–º–µ–Ω—Ç—ã –∫–ª–µ—Ç–∫–∏ {self.cell}")
#         self.cells = cells
#         self.cells = self.cell*self.cells
#         if len(self.cells) > 1:
#             print(f"–ö–ª–µ—Ç–∫–∏ {self.cells}")
#         else:
#             print(f"–ö–ª–µ—Ç–∫–∞ {self.cells}")
#
#     # –í –∫–ª–∞—Å—Å–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –º–µ—Ç–æ–¥—ã –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:
#     def __add__(self, new_cell=None):
#         # self.parts_of_cell += new_cell
#         if new_cell is None:
#             new_cell = ['*', '*', '*', '*', '*']
#         else:
#             new_cell = ["*"] * new_cell
#             if len(new_cell) > 5:
#                 cell_full = len(new_cell) // 5
#                 cell_not_full = len(new_cell) % 5
#                 new_cell = self.cell*cell_full + ['*']*cell_not_full
#         return self.cells + new_cell
#
#     def __sub__(self, new_cell=None):
#         if new_cell is None:
#             new_cell = ['*', '*', '*', '*', '*']
#         else:
#             new_cell = ["*"] * new_cell
#             if len(new_cell) > 1:
#                 cell_full = len(new_cell) // 5
#                 cell_not_full = len(new_cell) % 5
#                 new_cell = self.cell * cell_full + ['*'] * cell_not_full
#         return self.cells + new_cell
#
#     # —Å–ª–æ–∂–µ–Ω–∏–µ (__add__()), –≤—ã—á–∏—Ç–∞–Ω–∏–µ (__sub__()),
#     # —É–º–Ω–æ–∂–µ–Ω–∏–µ (__mul__()), –¥–µ–ª–µ–Ω–∏–µ (__truediv__()).
#
#     def __mul__(self):
#         pass
#
#     def __truediv__(self, other):
#         # –í –º–µ—Ç–æ–¥–µ –¥–µ–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å—Å—è –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞.
#         len(self.cell) / other
#
#
# c = Cell(5, 2)
# print(c.__add__(15))

# –î–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –∫ –∫–ª–µ—Ç–∫–∞–º –∏
# –≤—ã–ø–æ–ª–Ω—è—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ, —É–º–µ–Ω—å—à–µ–Ω–∏–µ, —É–º–Ω–æ–∂–µ–Ω–∏–µ –∏ –æ–±—ã—á–Ω–æ–µ
# (–Ω–µ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ) –¥–µ–ª–µ–Ω–∏–µ –∫–ª–µ—Ç–æ–∫, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ.

# –°–ª–æ–∂–µ–Ω–∏–µ. –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –∫–ª–µ—Ç–æ–∫. –ü—Ä–∏ —ç—Ç–æ–º —á–∏—Å–ª–æ —è—á–µ–µ–∫
# –æ–±—â–µ–π –∫–ª–µ—Ç–∫–∏ –¥–æ–ª–∂–Ω–æ —Ä–∞–≤–Ω—è—Ç—å—Å—è —Å—É–º–º–µ —è—á–µ–µ–∫ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–≤—É—Ö –∫–ª–µ—Ç–æ–∫.
# –í—ã—á–∏—Ç–∞–Ω–∏–µ. –£—á–∞—Å—Ç–≤—É—é—Ç –¥–≤–µ –∫–ª–µ—Ç–∫–∏. –û–ø–µ—Ä–∞—Ü–∏—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å
# —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–∑–Ω–æ—Å—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —è—á–µ–µ–∫ –¥–≤—É—Ö –∫–ª–µ—Ç–æ–∫ –±–æ–ª—å—à–µ –Ω—É–ª—è,
# –∏–Ω–∞—á–µ –≤—ã–≤–æ–¥–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
# –£–º–Ω–æ–∂–µ–Ω–∏–µ. –°–æ–∑–¥–∞–µ—Ç—Å—è –æ–±—â–∞—è –∫–ª–µ—Ç–∫–∞ –∏–∑ –¥–≤—É—Ö. –ß–∏—Å–ª–æ —è—á–µ–µ–∫ –æ–±—â–µ–π
# –∫–ª–µ—Ç–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —è—á–µ–µ–∫ —ç—Ç–∏—Ö
# –¥–≤—É—Ö –∫–ª–µ—Ç–æ–∫.
# –î–µ–ª–µ–Ω–∏–µ. –°–æ–∑–¥–∞–µ—Ç—Å—è –æ–±—â–∞—è –∫–ª–µ—Ç–∫–∞ –∏–∑ –¥–≤—É—Ö. –ß–∏—Å–ª–æ —è—á–µ–µ–∫ –æ–±—â–µ–π
# –∫–ª–µ—Ç–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —è—á–µ–µ–∫
# —ç—Ç–∏—Ö –¥–≤—É—Ö –∫–ª–µ—Ç–æ–∫.
# –í –∫–ª–∞—Å—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ make_order(),
# –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫ –≤ —Ä—è–¥—É.
# –î–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —è—á–µ–π–∫–∏ –ø–æ —Ä—è–¥–∞–º.
# –ú–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ *****\n*****\n*****...,
# –≥–¥–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫ –º–µ–∂–¥—É \n —Ä–∞–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É –∞—Ä–≥—É–º–µ–Ω—Ç—É.
# –ï—Å–ª–∏ —è—á–µ–µ–∫ –Ω–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—è–¥–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, —Ç–æ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π
# —Ä—è–¥ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è.
# –ù–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫ –∫–ª–µ—Ç–∫–∏ —Ä–∞–≤–Ω—è–µ—Ç—Å—è 12, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
# —è—á–µ–µ–∫ –≤ —Ä—è–¥—É ‚Äî 5.
# –¢–æ–≥–¥–∞ –º–µ—Ç–æ–¥ make_order() –≤–µ—Ä–Ω–µ—Ç —Å—Ç—Ä–æ–∫—É: *****\n*****\n**.
# –ò–ª–∏, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫ –∫–ª–µ—Ç–∫–∏ —Ä–∞–≤–Ω—è–µ—Ç—Å—è 15, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
# —è—á–µ–µ–∫ –≤ —Ä—è–¥—É ‚Äî 5. –¢–æ–≥–¥–∞ –º–µ—Ç–æ–¥ make_order() –≤–µ—Ä–Ω–µ—Ç —Å—Ç—Ä–æ–∫—É:
# *****\n*****\n*****.

#
# class Cell:
#     def __init__(self, quantity):
#         self.quantity = int(quantity)
#         # self.result = result
#
#     def __str__(self):
#         return f'–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ {self.quantity * "*"}'
#
#     def __add__(self, other):
#         # self.result = Cell(self.quantity + other.quantity)
#         return Cell(self.quantity + other.quantity)
#
#     def __sub__(self, other):
#         '''
#         –í—ã–¥–∞–µ—Ç –æ—à–∏–±–∫—É –æ —Ç–æ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —á–∏—Å–ª–æ  –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏
#         if int(Cell(self.quantity - other.quantity)) > 0:
#             return Cell(int(self.quantity - other.quantity))
#         else:
#             return f'–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã—á–∏—Ç–∞–Ω–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞'""
#         '''
#         return self.quantity - other.quantity if (self.quantity - other.quantity) > 0 else print('–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ!')
#
#         # return Cell(int(self.quantity - other.quantity))
#
#     def __mul__(self, other):
#         # self.result = Cell(int(self.quantity * other.quantity))
#         return Cell(int(self.quantity * other.quantity))
#
#     def __truediv__(self, other):
#         # self.result = Cell(round(self.quantity // other.quantity))
#         return Cell(round(self.quantity // other.quantity))
#
#     def make_order(self, cells_in_row):
#         row = ''
#         for i in range(int(self.quantity / cells_in_row)):
#             row += f'{"*" * cells_in_row} \\n'
#         row += f'{"*" * (self.quantity % cells_in_row)}'
#         return row
#
#
# cells1 = Cell(33)
# cells2 = Cell(9)
# print(cells1)
# print(cells1 + cells2)
# print(cells2 - cells1)
# print(cells2.make_order(5))
# print(cells1.make_order(10))
# print(cells1 / cells2)
